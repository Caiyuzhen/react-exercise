{"ast":null,"code":"var _jsxFileName = \"/Users/zen/Desktop/react-exercise/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React from 'react'; //1.从 react 中导入 useState,useEffect 函数\n\nimport { useState, useEffect } from 'react'; //🚀 Hooks - useEffect\n//WHat？ \n//比如函数内会修改全局的变量, 实际例子:\n//1.发送 ajax 请求\n//2.手动修改 DOM\n//3.localStorage 操作(本地存储)\n//How?\n//使用步骤 🌟\n//1.导入 useEffect 函数\n//2.在函数组件中执行 useEffect,传入回调并定义副作用\n//3.当通过修改状态更新组件时，副作用也会不断的执行\n//——————————————————————————————————————————————————————————————————\n//修改数据后，把 count 放到页面标题中\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //👇相当于从【setState的数组中】解构出【数字、方法】\n  const [count, setCount] = useState(0); //2.执行 useState 函数并传入初始值（初始值必须在函数组件中）  3.从函数的执行结果中解构出 [数据，修改数据的方法]\n\n  useEffect(() => {\n    //2.在函数组件中执行 useEffect,传入回调并定义副作用\n    //修改 h1 标签\n    document.querySelector('h1').innerHTML = count;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u5566\\u5566\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount(count + 1),\n      children: [\" \\u70B9\\u51FB + \", count, \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n} // //最后需要 export 一下！\n\n\n_s(App, \"f6rNyXb4nKr8df0VUP2jADfsx6o=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","App","count","setCount","document","querySelector","innerHTML"],"sources":["/Users/zen/Desktop/react-exercise/src/App.js"],"sourcesContent":["import \"./App.css\"\nimport React from 'react' \n//1.从 react 中导入 useState,useEffect 函数\nimport {useState,useEffect} from 'react'\n\n\n//🚀 Hooks - useEffect\n    //WHat？ \n      //比如函数内会修改全局的变量, 实际例子:\n        //1.发送 ajax 请求\n        //2.手动修改 DOM\n        //3.localStorage 操作(本地存储)\n    \n\n    //How?\n      //使用步骤 🌟\n        //1.导入 useEffect 函数\n        //2.在函数组件中执行 useEffect,传入回调并定义副作用\n        //3.当通过修改状态更新组件时，副作用也会不断的执行\n\n\n\n//——————————————————————————————————————————————————————————————————\n\n\n//修改数据后，把 count 放到页面标题中\n\n\nfunction App() {\n  //👇相当于从【setState的数组中】解构出【数字、方法】\n  const [count,setCount] = useState(0)//2.执行 useState 函数并传入初始值（初始值必须在函数组件中）  3.从函数的执行结果中解构出 [数据，修改数据的方法]\n\n\n\n  \n  useEffect(()=>{\n    //2.在函数组件中执行 useEffect,传入回调并定义副作用\n    \n    //修改 h1 标签\n    document.querySelector('h1').innerHTML = count\n\n  })\n\n  return(\n    <div>\n      <h1>啦啦</h1>\n      {/* jsx 内不能写为 ++ */}\n      <br />\n        <button onClick = {() => setCount(count+1)}> 点击 + {count}  </button>\n      <br />\n    </div>\n  )\n}\n\n\n\n\n// //最后需要 export 一下！\nexport default App\n\n\n"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAAQC,QAAR,EAAiBC,SAAjB,QAAiC,OAAjC,C,CAGA;AACI;AACE;AACE;AACA;AACA;AAGJ;AACE;AACE;AACA;AACA;AAIR;AAGA;;;;AAGA,SAASC,GAAT,GAAe;EAAA;;EACb;EACA,MAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBJ,QAAQ,CAAC,CAAD,CAAjC,CAFa,CAEuB;;EAKpCC,SAAS,CAAC,MAAI;IACZ;IAEA;IACAI,QAAQ,CAACC,aAAT,CAAuB,IAAvB,EAA6BC,SAA7B,GAAyCJ,KAAzC;EAED,CANQ,CAAT;EAQA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAGE;MAAA;MAAA;MAAA;IAAA,QAHF,eAII;MAAQ,OAAO,EAAI,MAAMC,QAAQ,CAACD,KAAK,GAAC,CAAP,CAAjC;MAAA,+BAAmDA,KAAnD;IAAA;MAAA;MAAA;MAAA;IAAA,QAJJ,eAKE;MAAA;MAAA;MAAA;IAAA,QALF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AASD,C,CAKD;;;GA7BSD,G;;KAAAA,G;AA8BT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}