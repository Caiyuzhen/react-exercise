{"ast":null,"code":"var _jsxFileName = \"/Users/zen/Desktop/react-exercise/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React from 'react'; //1.从 react 中导入 useState 函数\n\nimport { useState } from 'react'; //🚀 Hooks\n// Why？\n//总结来说，解决两个问题：\n//1.组件的状态逻辑复用 🌟\n//2.class 自身的问题，class 很复杂\n//What？\n//本质是什么？\n//Hook 的本质是一套能使【函数组件】具备更强大更灵活的“钩子函数（在某个时机下自动执行）”\n//有什么优势？\n//1.解决业务逻辑难以拆分的问题\n//2.使状态的逻辑复用变得简单可行\n//3.更加契合 React 的设计理念: `UI = fn(data)`, 起因是函数组件没有自己的状态，于是出现了 Hook，Hook 是为了让函数组件拥有自己的状态\n//hook 函数是什么\n//🔥useState 函数\n//const [count,setCount] = useState(x)\n//count 名字可以自定义，setCount 名字可以自定义， x 为初始值, 顺序不能换，前一个是【数据状态值】，后一个是【修改数据的函数】\n//🌟🌟数组的解构赋值是有顺序的，对象的解构赋值是无顺序的🔥🔥\n//setCount 不是修改原值，而是【🔥🔥生成一个新值来替换原值】\n//count 跟 setCount 是【⚡️绑定在一起⚡️】的，只能用来修改 count 的值，不能修改其他的\n//🔥useState 内 setCount 方法的更新过程\n//⚡️1.首次渲染：（初始值只在首次渲染时生效，⛰️第二次调用的时候就【不是初始值了】！！）\n//⚡️2.更新阶段：count 拿到的永远是更新之后的最新值\n//🔥特点\n//可以定义多个 useState 函数, 各自函数的【数据】跟【方法】都是独立的, 互相不影响\n//🔥注意事项\n//只能在函数组件中使用 🌟\n//🔥不能出现在（if/for/其他函数）中, 因为依赖于\n//比如if（num / 2 === 0）{ const [name,steName] = setState('cp) }\n//How?\n//使用步骤 🌟\n//1.从 react 中导入 useState 函数\n//2.执行 useState 函数并传入初始值（初始值必须在函数组件中）\n//3.从函数的执行结果中解构出 【数据状态值，修改数据的方法】\n//4.使用数据、修改数据\n//——————————————————————————————————————————————————————————————————\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //👇相当于从【setState的数组中】解构出【数字、方法】\n  const [count, setCount] = useState(0); //2.执行 useState 函数并传入初始值（初始值必须在函数组件中）  3.从函数的执行结果中解构出 [数据，修改数据的方法]\n\n  const [flag, setFlag] = useState(true);\n  const [list, setList] = useState([]);\n\n  function changeManyState() {\n    setFlag(false);\n    setList([1, 2, 3]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount(count + 1),\n      children: [\" \\u70B9\\u51FB + \", count, \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"flag:\", flag ? '1' : '0', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), \"list:\", list.join('-')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeManyState,\n      children: \" \\u70B9\\u51FB\\u89E6\\u53D1\\u4FEE\\u6539\\u591A\\u4E2A state \\u7684\\u51FD\\u6570 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n} // //最后需要 export 一下！\n\n\n_s(App, \"Gs1mY/+/wATxOQcfnlzNoLkfRhE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","App","count","setCount","flag","setFlag","list","setList","changeManyState","join"],"sources":["/Users/zen/Desktop/react-exercise/src/App.js"],"sourcesContent":["import \"./App.css\"\nimport React from 'react' \n//1.从 react 中导入 useState 函数\nimport {useState} from 'react'\n\n\n//🚀 Hooks\n    // Why？\n      //总结来说，解决两个问题：\n        //1.组件的状态逻辑复用 🌟\n        //2.class 自身的问题，class 很复杂\n    \n\n\n    //What？\n      //本质是什么？\n        //Hook 的本质是一套能使【函数组件】具备更强大更灵活的“钩子函数（在某个时机下自动执行）”\n\n\n      //有什么优势？\n        //1.解决业务逻辑难以拆分的问题\n        //2.使状态的逻辑复用变得简单可行\n        //3.更加契合 React 的设计理念: `UI = fn(data)`, 起因是函数组件没有自己的状态，于是出现了 Hook，Hook 是为了让函数组件拥有自己的状态\n      \n\n      //hook 函数是什么\n        //🔥useState 函数\n            //const [count,setCount] = useState(x)\n\n            //count 名字可以自定义，setCount 名字可以自定义， x 为初始值, 顺序不能换，前一个是【数据状态值】，后一个是【修改数据的函数】\n            //🌟🌟数组的解构赋值是有顺序的，对象的解构赋值是无顺序的🔥🔥\n            //setCount 不是修改原值，而是【🔥🔥生成一个新值来替换原值】\n            //count 跟 setCount 是【⚡️绑定在一起⚡️】的，只能用来修改 count 的值，不能修改其他的\n\n\n        //🔥useState 内 setCount 方法的更新过程\n                  //⚡️1.首次渲染：（初始值只在首次渲染时生效，⛰️第二次调用的时候就【不是初始值了】！！）\n                  //⚡️2.更新阶段：count 拿到的永远是更新之后的最新值\n\n        \n        //🔥特点\n            //可以定义多个 useState 函数, 各自函数的【数据】跟【方法】都是独立的, 互相不影响\n\n        \n          \n        //🔥注意事项\n          //只能在函数组件中使用 🌟\n\n\n        //🔥不能出现在（if/for/其他函数）中, 因为依赖于\n          //比如if（num / 2 === 0）{ const [name,steName] = setState('cp) }\n\n\n\n    //How?\n      //使用步骤 🌟\n        //1.从 react 中导入 useState 函数\n        //2.执行 useState 函数并传入初始值（初始值必须在函数组件中）\n        //3.从函数的执行结果中解构出 【数据状态值，修改数据的方法】\n        //4.使用数据、修改数据\n\n\n//——————————————————————————————————————————————————————————————————\n\n\nfunction App() {\n  //👇相当于从【setState的数组中】解构出【数字、方法】\n  const [count,setCount] = useState(0)//2.执行 useState 函数并传入初始值（初始值必须在函数组件中）  3.从函数的执行结果中解构出 [数据，修改数据的方法]\n  const [flag,setFlag] = useState(true)\n  const [list,setList] = useState([])\n\n  function changeManyState(){\n    setFlag(false)\n    setList([1,2,3])\n  }\n\n  return(\n    <div>\n      {/* jsx 内不能写为 ++ */}\n      <button onClick = {() => setCount(count+1)}> 点击 + {count}  </button>\n          <br />\n          <br />\n        <div>\n          flag:{flag ? '1' : '0'} \n          <br />\n          list:{list.join('-')} \n        </div>\n      <button onClick = {changeManyState}> 点击触发修改多个 state 的函数 </button>\n    </div>\n  )\n}\n\n\n\n\n// //最后需要 export 一下！\nexport default App\n\n\n"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAAQC,QAAR,QAAuB,OAAvB,C,CAGA;AACI;AACE;AACE;AACA;AAIJ;AACE;AACE;AAGF;AACE;AACA;AACA;AAGF;AACE;AACI;AAEA;AACA;AACA;AACA;AAGJ;AACU;AACA;AAGV;AACI;AAIJ;AACE;AAGF;AACE;AAIN;AACE;AACE;AACA;AACA;AACA;AAGR;;;;AAGA,SAASC,GAAT,GAAe;EAAA;;EACb;EACA,MAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBH,QAAQ,CAAC,CAAD,CAAjC,CAFa,CAEuB;;EACpC,MAAM,CAACI,IAAD,EAAMC,OAAN,IAAiBL,QAAQ,CAAC,IAAD,CAA/B;EACA,MAAM,CAACM,IAAD,EAAMC,OAAN,IAAiBP,QAAQ,CAAC,EAAD,CAA/B;;EAEA,SAASQ,eAAT,GAA0B;IACxBH,OAAO,CAAC,KAAD,CAAP;IACAE,OAAO,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAD,CAAP;EACD;;EAED,oBACE;IAAA,wBAEE;MAAQ,OAAO,EAAI,MAAMJ,QAAQ,CAACD,KAAK,GAAC,CAAP,CAAjC;MAAA,+BAAmDA,KAAnD;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAGM;MAAA;MAAA;MAAA;IAAA,QAHN,eAIM;MAAA;MAAA;MAAA;IAAA,QAJN,eAKI;MAAA,oBACQE,IAAI,GAAG,GAAH,GAAS,GADrB,eAEE;QAAA;QAAA;QAAA;MAAA,QAFF,WAGQE,IAAI,CAACG,IAAL,CAAU,GAAV,CAHR;IAAA;MAAA;MAAA;MAAA;IAAA,QALJ,eAUE;MAAQ,OAAO,EAAID,eAAnB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAVF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAcD,C,CAKD;;;GA9BSP,G;;KAAAA,G;AA+BT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}