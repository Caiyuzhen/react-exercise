{"ast":null,"code":"var _jsxFileName = \"/Users/Youzen/Desktop/react-exercise/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React from 'react'; //1.从 react 中导入 useState,useEffect 函数\n\nimport { useState, useEffect } from 'react'; //🚀 Hook - useState 回调函数生成初始值的写法 🔥\n//Why？\n//让 useState() 的参数不是固定写死的，是可以计算的\n//How?\n//const [count,setCount] = useState (()=>{})\n//🔥 比如要通过 一万次 的查找才能计算出初始值，就可以使用此方法\n//第一步：\n// function getDefaultCount(){\n//   for(let i=0;i <1000;i++){\n//     //...\n//   }\n//   return '10'\n// }\n//第二步：\n// function Counter (){ //🔥🔥 通过 props 来接收从 APP() 这个父函数传递过来的 count 值\n//   const [count,setCount] = useState( ()=>{ return getDefaultCount()} )\n//   return(\n//     <button \n//       onClick={()=> setCount(count+1)}> {count} </button>\n//   )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Counter(props) {\n  _s();\n\n  //🔥🔥 通过 props 来接收从 APP() 这个父函数传递过来的 count 值\n  const [count, setCount] = useState(() => {\n    return props.count - 5;\n  });\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => setCount(count + 1),\n    children: [\" \", count, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Counter, \"D7UPx+Nwg/dj+ML7dTCVQL25bXk=\");\n\n_c = Counter;\n\nfunction APP() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Counter, {\n      count: 10\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Counter, {\n      count: 20\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Counter, {\n      count: 30\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n} // 最后需要 export 一下！\n\n\n_c2 = APP;\nexport default APP;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Counter\");\n$RefreshReg$(_c2, \"APP\");","map":{"version":3,"names":["React","useState","useEffect","Counter","props","count","setCount","APP"],"sources":["/Users/Youzen/Desktop/react-exercise/src/App.js"],"sourcesContent":["import \"./App.css\"\nimport React from 'react'\n//1.从 react 中导入 useState,useEffect 函数\nimport { useState,useEffect } from 'react'\n\n\n//🚀 Hook - useState 回调函数生成初始值的写法 🔥\n\n  //Why？\n    //让 useState() 的参数不是固定写死的，是可以计算的\n\n  //How?\n    //const [count,setCount] = useState (()=>{})\n\n\n    \n//🔥 比如要通过 一万次 的查找才能计算出初始值，就可以使用此方法\n  //第一步：\n    // function getDefaultCount(){\n    //   for(let i=0;i <1000;i++){\n    //     //...\n    //   }\n    //   return '10'\n    // }\n\n  //第二步：\n    // function Counter (){ //🔥🔥 通过 props 来接收从 APP() 这个父函数传递过来的 count 值\n\n    //   const [count,setCount] = useState( ()=>{ return getDefaultCount()} )\n\n    //   return(\n    //     <button \n    //       onClick={()=> setCount(count+1)}> {count} </button>\n    //   )\n    // }\n\n\n\n\nfunction Counter (props){ //🔥🔥 通过 props 来接收从 APP() 这个父函数传递过来的 count 值\n\n  const [count,setCount] = useState( ()=>{ return props.count - 5} )\n\n  return(\n    <button \n      onClick={()=> setCount(count+1)}> {count} </button>\n  )\n}\n\n\nfunction APP(){\n  return(\n    <div>\n      <Counter count={10}/>\n      <Counter count={20}/>\n      <Counter count={30}/>\n    </div>\n  )\n}\n\n// 最后需要 export 一下！\nexport default APP\n\n\n\n"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,QAAT,EAAkBC,SAAlB,QAAmC,OAAnC,C,CAGA;AAEE;AACE;AAEF;AACE;AAIJ;AACE;AACE;AACA;AACA;AACA;AACA;AACA;AAEF;AACE;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;AAKJ,SAASC,OAAT,CAAkBC,KAAlB,EAAwB;EAAA;;EAAE;EAExB,MAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBL,QAAQ,CAAE,MAAI;IAAE,OAAOG,KAAK,CAACC,KAAN,GAAc,CAArB;EAAuB,CAA/B,CAAjC;EAEA,oBACE;IACE,OAAO,EAAE,MAAKC,QAAQ,CAACD,KAAK,GAAC,CAAP,CADxB;IAAA,gBACqCA,KADrC;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAID;;GARQF,O;;KAAAA,O;;AAWT,SAASI,GAAT,GAAc;EACZ,oBACE;IAAA,wBACE,QAAC,OAAD;MAAS,KAAK,EAAE;IAAhB;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,OAAD;MAAS,KAAK,EAAE;IAAhB;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE,QAAC,OAAD;MAAS,KAAK,EAAE;IAAhB;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,C,CAED;;;MAVSA,G;AAWT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}