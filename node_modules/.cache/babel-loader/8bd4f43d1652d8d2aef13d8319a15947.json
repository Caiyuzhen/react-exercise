{"ast":null,"code":"var _jsxFileName = \"/Users/zen/Desktop/react-exercise/src/App.js\";\nimport \"./App.css\";\nimport React from \"react\"; //引入 react 包\n//组件化：函数组件 & 类组件\n//原则：\n// 🚀🚀 首字母也必须大写（大驼峰）\n// 🚀🚀 类组件应该集成 React.Component 类，从中使用一些方法或属性\n// 🚀🚀  没法直接返回一个函数组件，可以用 render(){} 方法来返回 UI 结构\n//事件绑定的方式：\n//on + 事件名称 = { 事件处理函数 },比如  <div onClick = { this.clickHandler } > </div>\n//React 事件采用驼峰命名法，比如 on\n//一：创建类组件\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass HelloComponent extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.clickHandler = () => {\n      console.log('类组件中的方法被触发了！');\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: this.clickHandler,\n      children: \"\\u8FD9\\u662F\\u4E00\\u4E2A\\u7C7B\\u7EC4\\u4EF6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 14\n    }, this);\n  }\n\n} //二：渲染类组件\n\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(HelloComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(HelloComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 7\n  }, this);\n} //最后需要 export 一下！\n\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","HelloComponent","Component","clickHandler","console","log","render","App"],"sources":["/Users/zen/Desktop/react-exercise/src/App.js"],"sourcesContent":["import \"./App.css\"\nimport React from \"react\"//引入 react 包\n\n//组件化：函数组件 & 类组件\n//原则：\n// 🚀🚀 首字母也必须大写（大驼峰）\n// 🚀🚀 类组件应该集成 React.Component 类，从中使用一些方法或属性\n// 🚀🚀  没法直接返回一个函数组件，可以用 render(){} 方法来返回 UI 结构\n\n//事件绑定的方式：\n//on + 事件名称 = { 事件处理函数 },比如  <div onClick = { this.clickHandler } > </div>\n//React 事件采用驼峰命名法，比如 on\n\n\n//一：创建类组件\nclass HelloComponent extends React.Component {\n\n  //🌟事件回调函数,👇相当于【实例】的方法, 🚀注意下面需要用 this 来访问！！\n  clickHandler = () => {\n      console.log('类组件中的方法被触发了！')\n  }\n\n  render() {\n      return <div onClick = { this.clickHandler } >这是一个类组件</div>\n  }\n}\n\n\n//二：渲染类组件\nfunction App () {\n  return (\n      <div>\n\n        {/* 自闭合标签 */}\n        <HelloComponent/>\n\n        {/* 函数式标签 */}\n        <HelloComponent></HelloComponent>\n\n      </div>\n\n  )\n}\n\n\n//最后需要 export 一下！\nexport default App\n\n\n"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAAyB;AAEzB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;;;;AACA,MAAMC,cAAN,SAA6BD,KAAK,CAACE,SAAnC,CAA6C;EAAA;IAAA;;IAAA,KAG3CC,YAH2C,GAG5B,MAAM;MACjBC,OAAO,CAACC,GAAR,CAAY,cAAZ;IACH,CAL0C;EAAA;;EAO3CC,MAAM,GAAG;IACL,oBAAO;MAAK,OAAO,EAAK,KAAKH,YAAtB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACH;;AAT0C,C,CAa7C;;;AACA,SAASI,GAAT,GAAgB;EACd,oBACI;IAAA,wBAGE,QAAC,cAAD;MAAA;MAAA;MAAA;IAAA,QAHF,eAME,QAAC,cAAD;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAYD,C,CAGD;;;KAhBSA,G;AAiBT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}