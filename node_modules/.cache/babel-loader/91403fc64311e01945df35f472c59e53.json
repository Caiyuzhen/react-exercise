{"ast":null,"code":"var _jsxFileName = \"/Users/Youzen/Desktop/react-exercise/src/App.js\";\nimport \"./App.css\";\nimport React from \"react\"; //引入 react 包\n//⚡️⚡️⚡️ 组件通信(让组件内的数据 state 进行可以进行流转)\n//🍎父子关系\n//最重要的\n//HOW?\n// 1.父组件提供原始数据 【state】\n// 2.给子组件标签 `添加属性` 值为 【state】 中的数据 -> msg={this.state.message}\n// 3.子组件中通过 【props】 来接受父组件传过来的数据\n//3-1.类组件使用 【this.props】 来获取 【props】对象\n//3-2.函数s式组件直接【通过参数】来获取 【props】对象\n//WHAT?\n// 1.props 内的数据都是只读的，单向数据流，没法修改！🔥\n// 2.props 支持传递任意数据，可以传递【数字】、【字符串】、【对象】、【数组】、【函数】、【布尔值】、【JSX（类似模板、插槽）】\n//🍊兄弟关系\n//通过自定义事件模式产生技术方法 eventBus / 通过共同的父组件通信\n//🍉其他关系\n//mobx / redux / 基于 hook 的方案\n//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n//🍎父子关系\n//🍎函数式 Son\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SonA(props) {\n  //props 是一个对象，存着父组件传过来的数据\n  return (\n    /*#__PURE__*/\n    //👇 通过 【props】 来接受父组件传过来的数据\n    _jsxDEV(\"div\", {\n      children: [\"\\u6211\\u662F SonA \\u5B50\\u7EC4\\u4EF6, \", props.msg]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_c = SonA;\n; //🍎类组件 Son\n\nclass SonB extends React.Component {\n  render(props) {\n    return (\n      /*#__PURE__*/\n      //👇 通过 【props】 来接受父组件传过来的数据\n      _jsxDEV(\"div\", {\n        children: [\"\\u6211\\u662F SonB \\u7C7B\\u7EC4\\u4EF6 \", this.props.msg]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n}\n\n; //——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n//最后需要 export 一下！\n\nexport default Father;\n\nvar _c;\n\n$RefreshReg$(_c, \"SonA\");","map":{"version":3,"names":["React","SonA","props","msg","SonB","Component","render","Father"],"sources":["/Users/Youzen/Desktop/react-exercise/src/App.js"],"sourcesContent":["import \"./App.css\"\nimport React from \"react\"//引入 react 包\n\n\n//⚡️⚡️⚡️ 组件通信(让组件内的数据 state 进行可以进行流转)\n  //🍎父子关系\n      //最重要的\n          //HOW?\n            // 1.父组件提供原始数据 【state】\n            // 2.给子组件标签 `添加属性` 值为 【state】 中的数据 -> msg={this.state.message}\n            // 3.子组件中通过 【props】 来接受父组件传过来的数据\n                    //3-1.类组件使用 【this.props】 来获取 【props】对象\n                    //3-2.函数s式组件直接【通过参数】来获取 【props】对象\n          //WHAT?\n            // 1.props 内的数据都是只读的，单向数据流，没法修改！🔥\n            // 2.props 支持传递任意数据，可以传递【数字】、【字符串】、【对象】、【数组】、【函数】、【布尔值】、【JSX（类似模板、插槽）】\n\n\n  //🍊兄弟关系\n      //通过自定义事件模式产生技术方法 eventBus / 通过共同的父组件通信\n\n  //🍉其他关系\n      //mobx / redux / 基于 hook 的方案\n\n\n//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n\n\n//🍎父子关系\n\n//🍎函数式 Son\nfunction SonA(props){ //props 是一个对象，存着父组件传过来的数据\n  return (\n\n    //👇 通过 【props】 来接受父组件传过来的数据\n    <div>\n        我是 SonA 子组件, { props.msg }\n    </div>\n  )\n};\n\n\n\n//🍎类组件 Son\nclass SonB extends React.Component{\n  render(props){\n    return (\n\n      //👇 通过 【props】 来接受父组件传过来的数据\n      <div>\n        我是 SonB 类组件 { this.props.msg }\n      </div>\n    )\n  }\n};\n\n\n\n\n\n//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n\n\n\n\n\n//最后需要 export 一下！\nexport default Father\n\n\n"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAAyB;AAGzB;AACE;AACI;AACI;AACE;AACA;AACA;AACQ;AACA;AACV;AACE;AACA;AAGV;AACI;AAEJ;AACI;AAGN;AAGA;AAEA;;;;AACA,SAASC,IAAT,CAAcC,KAAd,EAAoB;EAAE;EACpB;IAAA;IAEE;IACA;MAAA,qDACmBA,KAAK,CAACC,GADzB;IAAA;MAAA;MAAA;MAAA;IAAA;EAHF;AAOD;;KARQF,I;AAQR,C,CAID;;AACA,MAAMG,IAAN,SAAmBJ,KAAK,CAACK,SAAzB,CAAkC;EAChCC,MAAM,CAACJ,KAAD,EAAO;IACX;MAAA;MAEE;MACA;QAAA,oDACgB,KAAKA,KAAL,CAAWC,GAD3B;MAAA;QAAA;QAAA;QAAA;MAAA;IAHF;EAOD;;AAT+B;;AAUjC,C,CAMD;AAMA;;AACA,eAAeI,MAAf"},"metadata":{},"sourceType":"module"}