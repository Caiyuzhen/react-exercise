{"ast":null,"code":"var _jsxFileName = \"/Users/zen/Desktop/react-exercise/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React from 'react'; //1.从 react 中导入 useState,useEffect 函数\n\nimport { useEffect } from 'react'; //🚀 Hook - 发送网络请求\n//🌟 useEffect 的执行时期\n//1.如果不加依赖项                   =>      初始化 + 重新渲染都会执行\n//2.如果加 [] 空数组 (在此步发送数据)  =>      只会执行初始化\n//3.加特定的依赖项 [count,name]      =>      首次执行 + 任意一个依赖项变化都会执行\n//🌟 原生的发送网络请求的方法\n//旧一代：   XMLHttpRequest\n//新一代：   fetch\n//封装的方法：axios\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction APP() {\n  _s();\n\n  useEffect(() => {\n    //发送请求,注意，🔥这里的 async 不能包裹在 useEffect 的回调中\n    async function loadData() {\n      //🚀第一步：发送请求\n      // const response = await fetch('http://geek.itheima.net/v1_0/channels')\n      fetch('http://geek.itheima.net/v1_0/channels') //🚀第二步：将数据进行 Json 化的操作\n      .then(response => response.json()) //🚀第三步：打印拿到 Json 化后的数据\n      .then(data => console.log(data)); //把返回的数据处理成正文\n    }\n\n    loadData(); //🔥调用这个发送请求的函数！！ \n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n} // 最后需要 export 一下！\n\n\n_s(APP, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = APP;\nexport default APP;\n\nvar _c;\n\n$RefreshReg$(_c, \"APP\");","map":{"version":3,"names":["React","useEffect","APP","loadData","fetch","then","response","json","data","console","log"],"sources":["/Users/zen/Desktop/react-exercise/src/App.js"],"sourcesContent":["import \"./App.css\"\nimport React from 'react'\n//1.从 react 中导入 useState,useEffect 函数\nimport { useEffect } from 'react'\n\n\n//🚀 Hook - 发送网络请求\n\n\n    //🌟 useEffect 的执行时期\n        //1.如果不加依赖项                   =>      初始化 + 重新渲染都会执行\n        //2.如果加 [] 空数组 (在此步发送数据)  =>      只会执行初始化\n        //3.加特定的依赖项 [count,name]      =>      首次执行 + 任意一个依赖项变化都会执行\n\n\n    //🌟 原生的发送网络请求的方法\n        //旧一代：   XMLHttpRequest\n        //新一代：   fetch\n        //封装的方法：axios\n\n\nfunction APP () {\n\n\n  useEffect(() => {\n    //发送请求,注意，🔥这里的 async 不能包裹在 useEffect 的回调中\n    async function loadData () {\n      //🚀第一步：发送请求\n      // const response = await fetch('http://geek.itheima.net/v1_0/channels')\n      fetch('http://geek.itheima.net/v1_0/channels')\n\n        //🚀第二步：将数据进行 Json 化的操作\n        .then(response => response.json())\n\n        //🚀第三步：打印拿到 Json 化后的数据\n        .then(data => console.log(data))\n        //把返回的数据处理成正文\n        \n        \n    }\n\n    loadData()//🔥调用这个发送请求的函数！！ \n  }, [])\n\n  return (\n    <div>\n\n\n    </div>\n  )\n}\n\n// 最后需要 export 一下！\nexport default APP\n\n\n\n"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,SAAT,QAA0B,OAA1B,C,CAGA;AAGI;AACI;AACA;AACA;AAGJ;AACI;AACA;AACA;;;;AAGR,SAASC,GAAT,GAAgB;EAAA;;EAGdD,SAAS,CAAC,MAAM;IACd;IACA,eAAeE,QAAf,GAA2B;MACzB;MACA;MACAC,KAAK,CAAC,uCAAD,CAAL,CAEE;MAFF,CAGGC,IAHH,CAGQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHpB,EAKE;MALF,CAMGF,IANH,CAMQG,IAAI,IAAIC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CANhB,EAHyB,CAUvB;IAGH;;IAEDL,QAAQ,GAjBM,CAiBJ;EACX,CAlBQ,EAkBN,EAlBM,CAAT;EAoBA,oBACE;IAAA;IAAA;IAAA;EAAA,QADF;AAMD,C,CAED;;;GA/BSD,G;;KAAAA,G;AAgCT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}