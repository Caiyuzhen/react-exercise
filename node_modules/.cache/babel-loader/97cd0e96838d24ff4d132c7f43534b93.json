{"ast":null,"code":"var _jsxFileName = \"/Users/Youzen/Desktop/react-exercise/src/App.js\";\nimport \"./App.css\";\nimport React from \"react\"; //引入 react 包\n//⚡️⚡️⚡️ 组件通信(让组件内的数据 state 进行可以进行流转)\n//🍎父子关系\n//HOW (子传父）\n//关键:\n//1.父组件准备一个函数\n//2.在父组件内把函数绑定给子组件\n//3.子组件声明一个 props 来解构赋值\n//4.子组件调用父组件传过来的函数, 并且把想要传递的数据作为函数的实参\n//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n//🍎类组件 Father\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Father extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      list: [1, 2, 3]\n    };\n\n    this.getMsgFromSon = sonMsgXXX => {\n      //定义一个参数，接受子组件回传的数据\n      console.log(sonMsgXXX);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(SonA, {\n        getMsgFromSon: this.getMsgFromSon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n; //🍎函数式 Son\n//🔥方法一: 复杂的写法\n// function SonA (props) { //props 包含了所有父组件传过来的参数\n//   const { getMsgFromSon } = props //解构赋值\n//   return (\n//     <div>\n//       这是子组件\n//       <br />\n//       <button onClick = { ()=>getMsgFromSon('这是来自于子组件的数据') }>用箭头函数的方式给父组件传数据</button> \n//     </div>\n//   )\n// };\n//🔥方法二:简洁的写法\n\nfunction SonA(props) {\n  const {\n    getMsgFromSon\n  } = props; //解构赋值\n\n  function clickFn() {\n    const someThing = '这是来自于子组件的数据'; //不写死的方式，声明一个变量来承载子组件的数据\n\n    getMsgFromSon(someThing); //👇点击后，把数据回调给父组件\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clickFn,\n      children: \"\\u7ED9\\u7236\\u7EC4\\u4EF6\\u4F20\\u6570\\u636E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n} //最后需要 export 一下！\n\n\n_c = SonA;\nexport default Father;\n\nvar _c;\n\n$RefreshReg$(_c, \"SonA\");","map":{"version":3,"names":["React","Father","Component","state","list","getMsgFromSon","sonMsgXXX","console","log","render","SonA","props","clickFn","someThing"],"sources":["/Users/Youzen/Desktop/react-exercise/src/App.js"],"sourcesContent":["import \"./App.css\"\nimport React from \"react\"//引入 react 包\n\n\n//⚡️⚡️⚡️ 组件通信(让组件内的数据 state 进行可以进行流转)\n//🍎父子关系\n\n  //HOW (子传父）\n      //关键:\n        //1.父组件准备一个函数\n        //2.在父组件内把函数绑定给子组件\n        //3.子组件声明一个 props 来解构赋值\n        //4.子组件调用父组件传过来的函数, 并且把想要传递的数据作为函数的实参\n\n\n\n//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n\n\n//🍎类组件 Father\nclass Father extends React.Component {\n  state = {\n    list: [1, 2, 3],\n  }\n\n  //1.准备一个函数传给子组件()\n  getMsgFromSon = ( sonMsgXXX ) => { //定义一个参数，接受子组件回传的数据\n      console.log(sonMsgXXX)\n  }\n\n  render () {\n    return (\n      <div>\n        <SonA \n          getMsgFromSon = { this.getMsgFromSon } \n        />\n      </div>\n    )\n  }\n};\n\n\n\n//🍎函数式 Son\n\n//🔥方法一: 复杂的写法\n// function SonA (props) { //props 包含了所有父组件传过来的参数\n\n//   const { getMsgFromSon } = props //解构赋值\n//   return (\n//     <div>\n//       这是子组件\n//       <br />\n//       <button onClick = { ()=>getMsgFromSon('这是来自于子组件的数据') }>用箭头函数的方式给父组件传数据</button> \n//     </div>\n//   )\n// };\n\n//🔥方法二:简洁的写法\nfunction SonA (props){\n\n  const { getMsgFromSon } = props //解构赋值\n  function clickFn () {\n\n    const someThing = '这是来自于子组件的数据' //不写死的方式，声明一个变量来承载子组件的数据\n\n    getMsgFromSon( someThing )//👇点击后，把数据回调给父组件\n  }\n\n  return(\n    <div>\n      <button onClick = { clickFn }>给父组件传数据</button>\n    </div>\n  )\n}\n\n\n\n//最后需要 export 一下！\nexport default Father\n\n\n"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAAyB;AAGzB;AACA;AAEE;AACI;AACE;AACA;AACA;AACA;AAIR;AAGA;;;;AACA,MAAMC,MAAN,SAAqBD,KAAK,CAACE,SAA3B,CAAqC;EAAA;IAAA;IAAA,KACnCC,KADmC,GAC3B;MACNC,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;IADA,CAD2B;;IAAA,KAMnCC,aANmC,GAMjBC,SAAF,IAAiB;MAAE;MAC/BC,OAAO,CAACC,GAAR,CAAYF,SAAZ;IACH,CARkC;EAAA;;EAUnCG,MAAM,GAAI;IACR,oBACE;MAAA,uBACE,QAAC,IAAD;QACE,aAAa,EAAK,KAAKJ;MADzB;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EAOD;;AAlBkC;;AAmBpC,C,CAID;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,SAASK,IAAT,CAAeC,KAAf,EAAqB;EAEnB,MAAM;IAAEN;EAAF,IAAoBM,KAA1B,CAFmB,CAEa;;EAChC,SAASC,OAAT,GAAoB;IAElB,MAAMC,SAAS,GAAG,aAAlB,CAFkB,CAEc;;IAEhCR,aAAa,CAAEQ,SAAF,CAAb,CAJkB,CAIQ;EAC3B;;EAED,oBACE;IAAA,uBACE;MAAQ,OAAO,EAAKD,OAApB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,C,CAID;;;KAnBSF,I;AAoBT,eAAeT,MAAf"},"metadata":{},"sourceType":"module"}