{"ast":null,"code":"var _jsxFileName = \"/Users/Youzen/Desktop/react-exercise/src/App.js\";\nimport \"./App.css\";\nimport React, { createContext } from 'react'; //导入 createContext 方法\n//⚡️⚡️⚡️ 组件通信(让组件内的数据 state 进行可以进行流转)\n//🍎 跨（多）层传递 App -> SonC\n//HOW?\n//1.导入 createContext 方法\n//import React, { createContext} from 'react'\n//2.创建 Context 对象 (解构赋值)\n//const { Provider,Consumer } = createContext()\n//3.使用 Provider 包裹根组件提供的数据\n//<Provider value={this.state.message} />\n//4.需要用到数据的组件用 Consumer 来获取数据\n//<Consumer {value => ...}/>\n//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n//2.创建 Context 对象 (解构赋值)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Provider,\n  Consumer\n} = /*#__PURE__*/createContext(); //🍎类组件 Father\n\nclass Father extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      message: \"我是父组件的数据\"\n    };\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // 3.使用 Provider 包裹根组件提供的数据 🔥🔥🔥\n      _jsxDEV(Provider, {\n        value: this.state.message,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(ComA, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n}\n\n; //——————————————————————\n\nfunction ComA() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"\\u8FD9\\u662F\\u7EC4\\u4EF6A\", /*#__PURE__*/_jsxDEV(ComC, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n} //——————————————————————\n\n\n_c = ComA;\n\nfunction ComC() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"\\u8FD9\\u662F\\u7EC4\\u4EF6C\", /*#__PURE__*/_jsxDEV(Consumer, {\n      children: value => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" \", value, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n} //最后需要 export 一下！\n\n\n_c2 = ComC;\nexport default Father;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ComA\");\n$RefreshReg$(_c2, \"ComC\");","map":{"version":3,"names":["React","createContext","Provider","Consumer","Father","Component","state","message","render","ComA","ComC","value"],"sources":["/Users/Youzen/Desktop/react-exercise/src/App.js"],"sourcesContent":["import \"./App.css\"\nimport React, { createContext } from 'react' //导入 createContext 方法\n\n\n//⚡️⚡️⚡️ 组件通信(让组件内的数据 state 进行可以进行流转)\n//🍎 跨（多）层传递 App -> SonC\n  //HOW?\n      //1.导入 createContext 方法\n          //import React, { createContext} from 'react'\n\n      //2.创建 Context 对象 (解构赋值)\n          //const { Provider,Consumer } = createContext()\n\n      //3.使用 Provider 包裹根组件提供的数据\n          //<Provider value={this.state.message} />\n\n      //4.需要用到数据的组件用 Consumer 来获取数据\n          //<Consumer {value => ...}/>\n\n\n\n\n\n\n\n\n//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n\n//2.创建 Context 对象 (解构赋值)\nconst { Provider, Consumer } = createContext()\n\n\n//🍎类组件 Father\nclass Father extends React.Component {\n\n  state = {\n    message: \"我是父组件的数据\"\n  }\n\n  render(){\n    return(\n      // 3.使用 Provider 包裹根组件提供的数据 🔥🔥🔥\n      <Provider value={this.state.message}>\n        <div>\n          <ComA />\n        </div>\n      </Provider>\n    )\n  }\n\n};\n\n//——————————————————————\n\n\n\n\nfunction ComA (){ \n  return(\n    <div>这是组件A\n      <ComC/>\n    </div>\n  )\n}\n\n\n//——————————————————————\n\n\nfunction ComC (){ \n  return(\n    <div>这是组件C\n      <Consumer>\n        {value => <span> {value} </span>}\n      </Consumer>\n    </div>\n  )\n}\n\n\n//最后需要 export 一下！\nexport default Father\n\n\n"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC,C,CAA6C;AAG7C;AACA;AACE;AACI;AACI;AAEJ;AACI;AAEJ;AACI;AAEJ;AACI;AASV;AAEA;;;AACA,MAAM;EAAEC,QAAF;EAAYC;AAAZ,iBAAyBF,aAAa,EAA5C,C,CAGA;;AACA,MAAMG,MAAN,SAAqBJ,KAAK,CAACK,SAA3B,CAAqC;EAAA;IAAA;IAAA,KAEnCC,KAFmC,GAE3B;MACNC,OAAO,EAAE;IADH,CAF2B;EAAA;;EAMnCC,MAAM,GAAE;IACN;MAAA;MACE;MACA,QAAC,QAAD;QAAU,KAAK,EAAE,KAAKF,KAAL,CAAWC,OAA5B;QAAA,uBACE;UAAA,uBACE,QAAC,IAAD;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IAFF;EAQD;;AAfkC;;AAiBpC,C,CAED;;AAKA,SAASE,IAAT,GAAgB;EACd,oBACE;IAAA,qDACE,QAAC,IAAD;MAAA;MAAA;MAAA;IAAA,QADF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,C,CAGD;;;KATSA,I;;AAYT,SAASC,IAAT,GAAgB;EACd,oBACE;IAAA,qDACE,QAAC,QAAD;MAAA,UACGC,KAAK,iBAAI;QAAA,gBAAQA,KAAR;MAAA;QAAA;QAAA;QAAA;MAAA;IADZ;MAAA;MAAA;MAAA;IAAA,QADF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,C,CAGD;;;MAXSD,I;AAYT,eAAeN,MAAf"},"metadata":{},"sourceType":"module"}