{"ast":null,"code":"var _jsxFileName = \"/Users/Youzen/Desktop/react-exercise/src/App.js\";\nimport \"./App.css\";\nimport React from \"react\"; //引入 react 包\n//⚡️⚡️⚡️ 组件通信(让组件内的数据 state 进行可以进行流转)\n//🍎父子关系\n//最重要的\n//HOW?\n// 1.父组件提供原始数据 【state】\n// 2.给子组件标签 `添加属性` 值为 【state】 中的数据 -> msg={this.state.message}\n// 3.子组件中通过 【props】 来接受父组件传过来的数据\n//3-1.类组件使用 【this.props】 来获取 【props】对象\n//3-2.函数s式组件直接【通过参数】来获取 【props】对象\n//WHAT?\n// 1.props 内的数据都是只读的，单向数据流，没法修改！🔥\n// 2.props 支持传递任意数据，可以传递【数字】、【字符串】、【对象】、【数组】、【函数】、【布尔值】、【JSX（类似模板、插槽）】\n//🍊兄弟关系\n//通过自定义事件模式产生技术方法 eventBus / 通过共同的父组件通信\n//🍉其他关系\n//mobx / redux / 基于 hook 的方案\n//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n//🍎父子关系\n//🍎类组件 Father\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Father extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      message: '我是父组件的 state 数据',\n      list: [1, 2, 3],\n      userInfo: {\n        name: 'cp',\n        age: 18\n      }\n    };\n\n    this.getMsg = () => {\n      console.log('我是父组件的函数');\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(SonA, {\n        msg: this.state.message,\n        list: this.state.list,\n        userInfo: this.state.userInfo,\n        getMsg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SonB, {\n        msg: this.state.message,\n        list: this.state.list,\n        userInfo: this.state.userInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n; //🍎函数式 Son\n\nfunction SonA(props) {\n  //props 是一个对象，存着父组件传过来的数据\n  return (\n    /*#__PURE__*/\n    //👇 通过 【props】 来接受父组件传过来的数据，其中列表为【遍历 list】 这个数组然后【放到】<p></p> 内，最后价格【key】\n    _jsxDEV(\"div\", {\n      children: [\"\\u6211\\u662F SonA \\u5B50\\u7EC4\\u4EF6, \", props.msg, \",\", props.list.map(item => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", item, \" \"]\n      }, item, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 59\n      }, this)), \" , \", props.userInfo.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_c = SonA;\n; //🍎类组件 Son\n\nclass SonB extends React.Component {\n  render(props) {\n    return (\n      /*#__PURE__*/\n      //👇 通过 【props】 来接受父组件传过来的数据\n      _jsxDEV(\"div\", {\n        children: [\"\\u6211\\u662F SonB \\u7C7B\\u7EC4\\u4EF6 \", this.props.msg, \", \", this.props.list.map(item => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", item, \" \"]\n        }, item, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 69\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n}\n\n; //——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n//最后需要 export 一下！\n\nexport default Father;\n\nvar _c;\n\n$RefreshReg$(_c, \"SonA\");","map":{"version":3,"names":["React","Father","Component","state","message","list","userInfo","name","age","getMsg","console","log","render","SonA","props","msg","map","item","SonB"],"sources":["/Users/Youzen/Desktop/react-exercise/src/App.js"],"sourcesContent":["import \"./App.css\"\nimport React from \"react\"//引入 react 包\n\n\n//⚡️⚡️⚡️ 组件通信(让组件内的数据 state 进行可以进行流转)\n  //🍎父子关系\n      //最重要的\n          //HOW?\n            // 1.父组件提供原始数据 【state】\n            // 2.给子组件标签 `添加属性` 值为 【state】 中的数据 -> msg={this.state.message}\n            // 3.子组件中通过 【props】 来接受父组件传过来的数据\n                    //3-1.类组件使用 【this.props】 来获取 【props】对象\n                    //3-2.函数s式组件直接【通过参数】来获取 【props】对象\n          //WHAT?\n            // 1.props 内的数据都是只读的，单向数据流，没法修改！🔥\n            // 2.props 支持传递任意数据，可以传递【数字】、【字符串】、【对象】、【数组】、【函数】、【布尔值】、【JSX（类似模板、插槽）】\n\n\n  //🍊兄弟关系\n      //通过自定义事件模式产生技术方法 eventBus / 通过共同的父组件通信\n\n  //🍉其他关系\n      //mobx / redux / 基于 hook 的方案\n\n\n//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n\n\n//🍎父子关系\n\n//🍎类组件 Father\nclass Father extends React.Component {\n  state = {\n    message: '我是父组件的 state 数据',\n    list:[1,2,3],\n    userInfo:{\n      name:'cp',\n      age:18\n    }\n  }\n\n  //传递函数\n  getMsg = () => {\n    console.log('我是父组件的函数')\n  }\n\n  render() {\n    return(\n      <div>\n        {/* 🔥在子组件上【🌟绑定数据🌟】，属性名可以自定义，保持语意化 */}\n          <SonA \n            msg={this.state.message}\n            list={this.state.list}\n            userInfo={this.state.userInfo}\n            getMsg\n          />\n          <br />\n          <SonB \n            msg={this.state.message}\n            list={this.state.list}\n            userInfo={this.state.userInfo}\n          />\n      </div>\n    )\n  }\n};\n\n\n\n//🍎函数式 Son\nfunction SonA(props){ //props 是一个对象，存着父组件传过来的数据\n  return (\n    //👇 通过 【props】 来接受父组件传过来的数据，其中列表为【遍历 list】 这个数组然后【放到】<p></p> 内，最后价格【key】\n    <div>\n        我是 SonA 子组件, { props.msg },{ props.list.map(item=><p key={item}> {item} </p>) } , { props.userInfo.name}\n    </div>\n  )\n};\n\n\n\n//🍎类组件 Son\nclass SonB extends React.Component{\n  render(props){\n    return (\n      //👇 通过 【props】 来接受父组件传过来的数据\n      <div>\n        我是 SonB 类组件 { this.props.msg }, { this.props.list.map(item=><p key={item}> {item} </p>) } \n      </div>\n    )\n  }\n};\n\n\n\n\n\n//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n\n\n\n\n\n//最后需要 export 一下！\nexport default Father\n\n\n"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAAyB;AAGzB;AACE;AACI;AACI;AACE;AACA;AACA;AACQ;AACA;AACV;AACE;AACA;AAGV;AACI;AAEJ;AACI;AAGN;AAGA;AAEA;;;;AACA,MAAMC,MAAN,SAAqBD,KAAK,CAACE,SAA3B,CAAqC;EAAA;IAAA;IAAA,KACnCC,KADmC,GAC3B;MACNC,OAAO,EAAE,iBADH;MAENC,IAAI,EAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAFC;MAGNC,QAAQ,EAAC;QACPC,IAAI,EAAC,IADE;QAEPC,GAAG,EAAC;MAFG;IAHH,CAD2B;;IAAA,KAWnCC,MAXmC,GAW1B,MAAM;MACbC,OAAO,CAACC,GAAR,CAAY,UAAZ;IACD,CAbkC;EAAA;;EAenCC,MAAM,GAAG;IACP,oBACE;MAAA,wBAEI,QAAC,IAAD;QACE,GAAG,EAAE,KAAKT,KAAL,CAAWC,OADlB;QAEE,IAAI,EAAE,KAAKD,KAAL,CAAWE,IAFnB;QAGE,QAAQ,EAAE,KAAKF,KAAL,CAAWG,QAHvB;QAIE,MAAM;MAJR;QAAA;QAAA;QAAA;MAAA,QAFJ,eAQI;QAAA;QAAA;QAAA;MAAA,QARJ,eASI,QAAC,IAAD;QACE,GAAG,EAAE,KAAKH,KAAL,CAAWC,OADlB;QAEE,IAAI,EAAE,KAAKD,KAAL,CAAWE,IAFnB;QAGE,QAAQ,EAAE,KAAKF,KAAL,CAAWG;MAHvB;QAAA;QAAA;QAAA;MAAA,QATJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAiBD;;AAjCkC;;AAkCpC,C,CAID;;AACA,SAASO,IAAT,CAAcC,KAAd,EAAoB;EAAE;EACpB;IAAA;IACE;IACA;MAAA,qDACmBA,KAAK,CAACC,GADzB,OACiCD,KAAK,CAACT,IAAN,CAAWW,GAAX,CAAeC,IAAI,iBAAE;QAAA,gBAAgBA,IAAhB;MAAA,GAAQA,IAAR;QAAA;QAAA;QAAA;MAAA,QAArB,CADjC,SACwFH,KAAK,CAACR,QAAN,CAAeC,IADvG;IAAA;MAAA;MAAA;MAAA;IAAA;EAFF;AAMD;;KAPQM,I;AAOR,C,CAID;;AACA,MAAMK,IAAN,SAAmBlB,KAAK,CAACE,SAAzB,CAAkC;EAChCU,MAAM,CAACE,KAAD,EAAO;IACX;MAAA;MACE;MACA;QAAA,oDACgB,KAAKA,KAAL,CAAWC,GAD3B,QACoC,KAAKD,KAAL,CAAWT,IAAX,CAAgBW,GAAhB,CAAoBC,IAAI,iBAAE;UAAA,gBAAgBA,IAAhB;QAAA,GAAQA,IAAR;UAAA;UAAA;UAAA;QAAA,QAA1B,CADpC;MAAA;QAAA;QAAA;QAAA;MAAA;IAFF;EAMD;;AAR+B;;AASjC,C,CAMD;AAMA;;AACA,eAAehB,MAAf"},"metadata":{},"sourceType":"module"}