{"ast":null,"code":"var _jsxFileName = \"/Users/zen/Desktop/react-exercise/src/App.js\";\nimport \"./App.css\";\nimport React from 'react'; //引入 ReactDOM， 目的是为了使用 ReactDOM 的方法\n//🚀 组件的生命周期(🌟只有类组件才有生命周期,在实例化的时候才会出现生命周期)\n//——————————————————————————————————————————————————————————————————\n//🍎 类组件生命周期\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    //1.【挂载阶段】先执行\n    super();\n    this.state = {\n      count: 0,\n      flag: true //true,显示 Test 组件， false 不显示 Test 组件\n\n    };\n\n    this.clickCountAdd = () => {\n      this.setState({\n        count: this.state.count + 1,\n        flag: !this.state.flag //取反，类似开关\n\n      });\n    };\n\n    console.log('挂载阶段-1:constructor');\n  }\n\n  componentDidMount() {\n    //3.【挂载阶段】最后执行\n    console.log('挂载阶段-3:componentDidMount'); //在这个阶段发送 ajax 请求 ...\n  }\n\n  componentDidUpdate() {\n    //4.【更新阶段】\n    console.log('更新阶段-4:componentDidUpdate');\n    const div = document.querySelector('.div');\n    console.log(div);\n    div.innerHTML = '我是更新后的内容';\n  }\n\n  render() {\n    //2.【挂载阶段】再执行\n    console.log('更新/挂载阶段-2:render');\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this);\n  }\n\n} //————————————————————————————————————————————————————\n\n\nclass Test extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.timer = null;\n  }\n\n  componentDidMount() {\n    //7.配合着中，在组件【挂载阶段】开启定时器,然后在【卸载(销毁)阶段】进行清除\n    this.timer = setInterval(() => {\n      console.log(\"开启定时器\");\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    //5.【卸载(销毁)阶段】,一般都是用来清理定时器\n    console.log('销毁阶段-5:componentWillUnmount'); //卸载的时候才会执行\n\n    clearInterval(this.timer); //在 APP 内点击后，触发开启清理定时器的函数，清理定时器\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u9700\\u8981\\u9500\\u6BC1\\u7684\\u51FD\\u6570\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  }\n\n} // //最后需要 export 一下！\n\n\nexport default App;","map":{"version":3,"names":["React","App","Component","constructor","state","count","flag","clickCountAdd","setState","console","log","componentDidMount","componentDidUpdate","div","document","querySelector","innerHTML","render","Test","timer","setInterval","componentWillUnmount","clearInterval"],"sources":["/Users/zen/Desktop/react-exercise/src/App.js"],"sourcesContent":["import \"./App.css\"\nimport React from 'react' \n//引入 ReactDOM， 目的是为了使用 ReactDOM 的方法\n\n\n\n//🚀 组件的生命周期(🌟只有类组件才有生命周期,在实例化的时候才会出现生命周期)\n\n    \n//——————————————————————————————————————————————————————————————————\n\n\n//🍎 类组件生命周期\nclass App extends React.Component {\n\n    state = {\n      count: 0,\n      flag: true //true,显示 Test 组件， false 不显示 Test 组件\n    }\n\n\n    clickCountAdd = () =>{\n      this.setState({\n        count: this.state.count +1,\n        flag: !this.state.flag //取反，类似开关\n      })\n    }\n\n\n    constructor() { //1.【挂载阶段】先执行\n      super();\n      console.log('挂载阶段-1:constructor');\n    }\n\n\n    componentDidMount() { //3.【挂载阶段】最后执行\n      console.log('挂载阶段-3:componentDidMount'); \n      //在这个阶段发送 ajax 请求 ...\n    }\n\n\n    componentDidUpdate () { //4.【更新阶段】\n      console.log('更新阶段-4:componentDidUpdate'); \n\n      const div = document.querySelector('.div');\n      console.log(div); \n      div.innerHTML = '我是更新后的内容';\n    }\n\n\n\n    render() { //2.【挂载阶段】再执行\n      console.log('更新/挂载阶段-2:render')\n      return (\n        <div>\n\n        </div>\n      )\n    }\n}\n\n\n//————————————————————————————————————————————————————\n\n\nclass Test extends React.Component {\n\n  //🌟 如果要用到的数据是组件的状态，要影响视图，才定义到 state 内\n  //🌟 如果要用到的数据跟视图不相关，则不用定义到 state 内，直接定义在组件内就行了\n  timer = null\n  \n  componentDidMount() { //7.配合着中，在组件【挂载阶段】开启定时器,然后在【卸载(销毁)阶段】进行清除\n    this.timer = setInterval(() =>{\n      console.log(\"开启定时器\");\n    },1000)\n  }\n\n\n  componentWillUnmount () {//5.【卸载(销毁)阶段】,一般都是用来清理定时器\n    console.log('销毁阶段-5:componentWillUnmount');//卸载的时候才会执行\n\n    clearInterval(this.timer); //在 APP 内点击后，触发开启清理定时器的函数，清理定时器\n  }\n\n\n  render() {\n    return (\n      <div>需要销毁的函数</div>\n    );\n  }\n}\n\n\n\n// //最后需要 export 一下！\nexport default App\n\n\n"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AAIA;AAGA;AAGA;;;;AACA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;EAgB9BC,WAAW,GAAG;IAAE;IACd;IADY,KAddC,KAcc,GAdN;MACNC,KAAK,EAAE,CADD;MAENC,IAAI,EAAE,IAFA,CAEK;;IAFL,CAcM;;IAAA,KARdC,aAQc,GARE,MAAK;MACnB,KAAKC,QAAL,CAAc;QACZH,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAkB,CADb;QAEZC,IAAI,EAAE,CAAC,KAAKF,KAAL,CAAWE,IAFN,CAEW;;MAFX,CAAd;IAID,CAGa;;IAEZG,OAAO,CAACC,GAAR,CAAY,oBAAZ;EACD;;EAGDC,iBAAiB,GAAG;IAAE;IACpBF,OAAO,CAACC,GAAR,CAAY,0BAAZ,EADkB,CAElB;EACD;;EAGDE,kBAAkB,GAAI;IAAE;IACtBH,OAAO,CAACC,GAAR,CAAY,2BAAZ;IAEA,MAAMG,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAZ;IACAN,OAAO,CAACC,GAAR,CAAYG,GAAZ;IACAA,GAAG,CAACG,SAAJ,GAAgB,UAAhB;EACD;;EAIDC,MAAM,GAAG;IAAE;IACTR,OAAO,CAACC,GAAR,CAAY,kBAAZ;IACA,oBACE;MAAA;MAAA;MAAA;IAAA,QADF;EAKD;;AA7C6B,C,CAiDlC;;;AAGA,MAAMQ,IAAN,SAAmBlB,KAAK,CAACE,SAAzB,CAAmC;EAAA;IAAA;IAAA,KAIjCiB,KAJiC,GAIzB,IAJyB;EAAA;;EAMjCR,iBAAiB,GAAG;IAAE;IACpB,KAAKQ,KAAL,GAAaC,WAAW,CAAC,MAAK;MAC5BX,OAAO,CAACC,GAAR,CAAY,OAAZ;IACD,CAFuB,EAEtB,IAFsB,CAAxB;EAGD;;EAGDW,oBAAoB,GAAI;IAAC;IACvBZ,OAAO,CAACC,GAAR,CAAY,6BAAZ,EADsB,CACqB;;IAE3CY,aAAa,CAAC,KAAKH,KAAN,CAAb,CAHsB,CAGK;EAC5B;;EAGDF,MAAM,GAAG;IACP,oBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAGD;;AAxBgC,C,CA6BnC;;;AACA,eAAehB,GAAf"},"metadata":{},"sourceType":"module"}