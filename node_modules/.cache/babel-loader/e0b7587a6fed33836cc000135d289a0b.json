{"ast":null,"code":"var _jsxFileName = \"/Users/Youzen/Desktop/react-exercise/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React from 'react'; //1.导入 useRef 函数\n\nimport { useRef, useEffect } from 'react'; //🚀 Hook - useRef\n//How?\n//1.导入 useRef 函数\n//2.定义 useRef 函数并传入 null，返回值作为一个对象\n//3.通过 ref 绑定元素\n//4.通过 useEffect 方法来获取到绑定在 return 位置的 DOM 元素\n//🔥场景一：获取组件实例 （函数组件没有实例，这里指的都是类组件）\n//🔥场景二：获取 DOM 对象 、标签\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TestC extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.tellName = () => {\n      return '啦啦啦';\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u6211\\u662F\\u4E00\\u4E2A\\u7C7B\\u7EC4\\u4EF6\\u7684\\u5143\\u7D20\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction APP() {\n  _s();\n\n  //2.执行 useRef 函数并传入 null，返回值作为一个对象\n  const testRef = useRef(null);\n  const h1Ref = useRef(null);\n  useEffect(() => {\n    //4.通过 useEffect 方法来获取到绑定在 return 位置的 DOM 元素\n    console.log(testRef.current); //5.ref 内部有个 current 属性来存放拿到的 DOM 对象, 可以通过 current.XXX 来调用实例对象内的方法\n\n    console.log(h1Ref.current);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TestC, {\n      ref: testRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      ref: h1Ref,\n      children: \" \\u8FD9\\u662F h1 \\u5143\\u7D20\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n} // 最后需要 export 一下！\n\n\n_s(APP, \"1cEXmZQ839BBB0ClxywlGUU81XY=\");\n\n_c = APP;\nexport default APP;\n\nvar _c;\n\n$RefreshReg$(_c, \"APP\");","map":{"version":3,"names":["React","useRef","useEffect","TestC","Component","tellName","render","APP","testRef","h1Ref","console","log","current"],"sources":["/Users/Youzen/Desktop/react-exercise/src/App.js"],"sourcesContent":["import \"./App.css\"\nimport React from 'react'\n//1.导入 useRef 函数\nimport { useRef, useEffect } from 'react'\n\n\n//🚀 Hook - useRef\n\n//How?\n//1.导入 useRef 函数\n//2.定义 useRef 函数并传入 null，返回值作为一个对象\n//3.通过 ref 绑定元素\n//4.通过 useEffect 方法来获取到绑定在 return 位置的 DOM 元素\n\n\n//🔥场景一：获取组件实例 （函数组件没有实例，这里指的都是类组件）\n//🔥场景二：获取 DOM 对象 、标签\n\nclass TestC extends React.Component {\n\n  tellName = () => {\n    return '啦啦啦'\n  }\n\n  render () {\n    return (\n      <div>我是一个类组件的元素</div>\n    )\n  }\n}\n\n\n\nfunction APP () {\n\n  //2.执行 useRef 函数并传入 null，返回值作为一个对象\n  const testRef = useRef(null)\n  const h1Ref = useRef(null)\n\n\n  useEffect(() => {//4.通过 useEffect 方法来获取到绑定在 return 位置的 DOM 元素\n    \n    console.log(testRef.current) //5.ref 内部有个 current 属性来存放拿到的 DOM 对象, 可以通过 current.XXX 来调用实例对象内的方法\n    console.log(h1Ref.current)\n  }, [])\n\n\n  return (\n    <div>\n      {/* 3.🔥通过 ref 绑定元素 */}\n      <TestC ref={testRef} />\n      <h1 ref={h1Ref}> 这是 h1 元素</h1>\n    </div>\n  )\n}\n\n\n\n\n// 最后需要 export 一下！\nexport default APP\n\n\n\n"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC,C,CAGA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;AAEA,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAoC;EAAA;IAAA;;IAAA,KAElCC,QAFkC,GAEvB,MAAM;MACf,OAAO,KAAP;IACD,CAJiC;EAAA;;EAMlCC,MAAM,GAAI;IACR,oBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAGD;;AAViC;;AAepC,SAASC,GAAT,GAAgB;EAAA;;EAEd;EACA,MAAMC,OAAO,GAAGP,MAAM,CAAC,IAAD,CAAtB;EACA,MAAMQ,KAAK,GAAGR,MAAM,CAAC,IAAD,CAApB;EAGAC,SAAS,CAAC,MAAM;IAAC;IAEfQ,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACI,OAApB,EAFc,CAEe;;IAC7BF,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;EACD,CAJQ,EAIN,EAJM,CAAT;EAOA,oBACE;IAAA,wBAEE,QAAC,KAAD;MAAO,GAAG,EAAEJ;IAAZ;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAI,GAAG,EAAEC,KAAT;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,C,CAKD;;;GA1BSF,G;;KAAAA,G;AA2BT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}