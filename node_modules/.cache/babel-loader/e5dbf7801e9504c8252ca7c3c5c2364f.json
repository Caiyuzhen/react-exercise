{"ast":null,"code":"var _jsxFileName = \"/Users/zen/Desktop/react-exercise/src/App.js\";\nimport \"./App.css\"; // import React from \"react\"//引入 react 包\n//1.导入 createRef 函数,相当于把真实的 DOM 元素往里边放\n\nimport React, { createRef } from \"react\"; //引入 react 包\n//🚀🚀🚀 React 处理表单的方式\n//🌟方式一：受控组件\n//❓What\n//Input 框状态（value 属性）被 react 组件状态控制 !\n//❓HOW？\n//1.先在 state 中声明一个【React 组件自己的状态数据】\n//2.将状态数据设置【绑定】为 input 的 value\n//3.为 input 【添加 change 事件】,目的是为了拿到当前输入框的最新数据\n//4.通过事件对象的回调函数【获取到当前文本框的值】\n//5.调用 【setState 方法】，将【事件对象获取到的文本框的值】【交还给state 状态】成为最新的最新值\n//🌟方式二：非受控组件\n//❓What\n//通过【手动操作 DOM 】的方式拿到文本框的值\n//❓HOW？\n//1.在最顶部导入 createRef 函数,相当于把真实的 DOM 元素往里边放\n//2.调用 createRef 函数，创建一个 ref 对象，存储到名为 `msgRef` 的实例属性中, 名字可以自定义\n//3.给 input 添加 【ref 属性】，值为【上一步⬆️】存储到 `msgRef` 的值\n//4.在按钮的事件处理程序中，通过 【 msgRef.current 】 即可【 拿到 input 对应的 DOM 元素 】，通过 【 this.state.msgRef.current.value 】 拿到的值就是【文本框的值】\n//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n//🌟方式一：受控组件\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ChangeList extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      message: 'this is a message'\n    };\n\n    this.inputFocusFn = e => {\n      this.setState({\n        //清空输入框的值\n        message: \"\"\n      });\n    };\n\n    this.inputChangeFn = e => {\n      // console.log(e);//事件对象的 value 属性是 message，\n      this.setState({\n        // 5.调用 【setState 方法】，将【事件对象获取到的文本框的值】【交还给state 状态】成为最新的最新值\n        message: e.target.value\n      });\n    };\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      //2.将状态数据设置【绑定】为 input 的 value !\n      //3.为 input 【添加 change 事件】,目的是为了拿到当前输入框的数据\n      _jsxDEV(\"input\", {\n        type: \"text\",\n        value: this.state.message,\n        style: {\n          color: '#3370FF',\n          fontSize: '0.85rem',\n          padding: '1rem',\n          borderRadius: '1rem',\n          width: '15rem',\n          margin: '12rem'\n        },\n        onFocus: this.inputFocusFn,\n        onChange: this.inputChangeFn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n} //——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n//🌟方式二：非受控组件\n\n\nclass ChangeList2 extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.msgRef = /*#__PURE__*/createRef();\n\n    this.getValueFn = () => {\n      //4.在按钮的事件处理程序中，通过 【 msgRef.current 】 即可【 拿到 input 对应的 DOM 元素 】，通过 【 msgRef.current.value 】 拿到的值就是【文本框的值】\n      console.log(this.state.msgRef.current.value);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        style: {\n          color: '#3370FF',\n          fontSize: '0.85rem',\n          padding: '1rem',\n          borderRadius: '1rem',\n          width: '15rem',\n          margin: '12rem'\n        } //3.给 input 添加 【ref 属性】，值为【上一步⬆️】存储到 this.state. 的 `msgRef` 的值\n        ,\n        ref: this.msgRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.getValueFn,\n        children: \"\\u70B9\\u51FB\\u83B7\\u53D6\\u8F93\\u5165\\u6846\\u7684\\u503C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n} //——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n//渲染类组件(根组件)\n\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'spaceEvenly'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ChangeList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ChangeList2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 7\n  }, this);\n} //最后需要 export 一下！\n\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","createRef","ChangeList","Component","state","message","inputFocusFn","e","setState","inputChangeFn","target","value","render","color","fontSize","padding","borderRadius","width","margin","ChangeList2","msgRef","getValueFn","console","log","current","App","display","justifyContent"],"sources":["/Users/zen/Desktop/react-exercise/src/App.js"],"sourcesContent":["import \"./App.css\"\n// import React from \"react\"//引入 react 包\n\n//1.导入 createRef 函数,相当于把真实的 DOM 元素往里边放\nimport React,{ createRef } from \"react\"//引入 react 包\n\n\n\n\n//🚀🚀🚀 React 处理表单的方式\n\n//🌟方式一：受控组件\n//❓What\n//Input 框状态（value 属性）被 react 组件状态控制 !\n\n//❓HOW？\n//1.先在 state 中声明一个【React 组件自己的状态数据】\n//2.将状态数据设置【绑定】为 input 的 value\n//3.为 input 【添加 change 事件】,目的是为了拿到当前输入框的最新数据\n//4.通过事件对象的回调函数【获取到当前文本框的值】\n//5.调用 【setState 方法】，将【事件对象获取到的文本框的值】【交还给state 状态】成为最新的最新值\n\n\n\n\n\n//🌟方式二：非受控组件\n//❓What\n//通过【手动操作 DOM 】的方式拿到文本框的值\n\n//❓HOW？\n//1.在最顶部导入 createRef 函数,相当于把真实的 DOM 元素往里边放\n//2.调用 createRef 函数，创建一个 ref 对象，存储到名为 `msgRef` 的实例属性中, 名字可以自定义\n//3.给 input 添加 【ref 属性】，值为【上一步⬆️】存储到 `msgRef` 的值\n//4.在按钮的事件处理程序中，通过 【 msgRef.current 】 即可【 拿到 input 对应的 DOM 元素 】，通过 【 this.state.msgRef.current.value 】 拿到的值就是【文本框的值】\n\n\n//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n\n\n\n//🌟方式一：受控组件\nclass ChangeList extends React.Component {\n\n  //1.先在 state 中声明一个【React 组件自己的状态数据】\n  state = {\n    message:'this is a message'\n  }\n\n  //不用看这里，我自己额外写的，聚焦的时候清空输入框\n  inputFocusFn = (e) => {\n    this.setState({\n      //清空输入框的值\n      message: \"\"\n    })\n  }\n\n\n  //4.通过事件对象的回调函数【获取到当前文本框的值】\n  inputChangeFn = (e) => {\n    // console.log(e);//事件对象的 value 属性是 message，\n\n    this.setState({\n      // 5.调用 【setState 方法】，将【事件对象获取到的文本框的值】【交还给state 状态】成为最新的最新值\n      message:e.target.value \n    })\n  }\n\n\n  render() {\n    return (\n      //2.将状态数据设置【绑定】为 input 的 value !\n      //3.为 input 【添加 change 事件】,目的是为了拿到当前输入框的数据\n      <input \n        type=\"text\" \n        value={this.state.message}\n        style={{color: '#3370FF',fontSize: '0.85rem',padding: '1rem',borderRadius: '1rem',width:'15rem',margin: '12rem'}}\n        onFocus={this.inputFocusFn}\n        onChange={this.inputChangeFn}\n      />\n   \n    )\n  }\n}\n\n\n\n//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n\n\n\n\n\n//🌟方式二：非受控组件\nclass ChangeList2 extends React.Component {\n\n  //2.调用 createRef 函数，创建一个 ref 对象，存储到名为 `msgRef` 的实例属性中, 名字可以自定义\n  msgRef = createRef()\n\n\n\n  getValueFn = () => {\n    //4.在按钮的事件处理程序中，通过 【 msgRef.current 】 即可【 拿到 input 对应的 DOM 元素 】，通过 【 msgRef.current.value 】 拿到的值就是【文本框的值】\n    \n    console.log(this.state.msgRef.current.value);\n\n  }\n\n\n\n  render() {\n    return (\n      <>\n        <input\n          type=\"text\" \n          style={{color: '#3370FF',fontSize: '0.85rem',padding: '1rem',borderRadius: '1rem',width:'15rem',margin: '12rem'}}\n          \n          //3.给 input 添加 【ref 属性】，值为【上一步⬆️】存储到 this.state. 的 `msgRef` 的值\n          ref={this.msgRef}\n        />\n        <button \n            onClick={this.getValueFn}\n        >点击获取输入框的值</button>\n      </>\n    )\n  }\n}\n\n\n\n\n//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n\n\n\n//渲染类组件(根组件)\nfunction App () {\n  return (\n      <div style={{display: 'flex', justifyContent: 'spaceEvenly'}}>\n        <ChangeList/>\n        <ChangeList2/>\n      </div>\n  )\n}\n\n\n//最后需要 export 一下！\nexport default App\n\n\n"],"mappings":";AAAA,OAAO,WAAP,C,CACA;AAEA;;AACA,OAAOA,KAAP,IAAeC,SAAf,QAAgC,OAAhC,C,CAAuC;AAKvC;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAIA;;;;;AACA,MAAMC,UAAN,SAAyBF,KAAK,CAACG,SAA/B,CAAyC;EAAA;IAAA;IAAA,KAGvCC,KAHuC,GAG/B;MACNC,OAAO,EAAC;IADF,CAH+B;;IAAA,KAQvCC,YARuC,GAQvBC,CAAD,IAAO;MACpB,KAAKC,QAAL,CAAc;QACZ;QACAH,OAAO,EAAE;MAFG,CAAd;IAID,CAbsC;;IAAA,KAiBvCI,aAjBuC,GAiBtBF,CAAD,IAAO;MACrB;MAEA,KAAKC,QAAL,CAAc;QACZ;QACAH,OAAO,EAACE,CAAC,CAACG,MAAF,CAASC;MAFL,CAAd;IAID,CAxBsC;EAAA;;EA2BvCC,MAAM,GAAG;IACP;MAAA;MACE;MACA;MACA;QACE,IAAI,EAAC,MADP;QAEE,KAAK,EAAE,KAAKR,KAAL,CAAWC,OAFpB;QAGE,KAAK,EAAE;UAACQ,KAAK,EAAE,SAAR;UAAkBC,QAAQ,EAAE,SAA5B;UAAsCC,OAAO,EAAE,MAA/C;UAAsDC,YAAY,EAAE,MAApE;UAA2EC,KAAK,EAAC,OAAjF;UAAyFC,MAAM,EAAE;QAAjG,CAHT;QAIE,OAAO,EAAE,KAAKZ,YAJhB;QAKE,QAAQ,EAAE,KAAKG;MALjB;QAAA;QAAA;QAAA;MAAA;IAHF;EAYD;;AAxCsC,C,CA6CzC;AAMA;;;AACA,MAAMU,WAAN,SAA0BnB,KAAK,CAACG,SAAhC,CAA0C;EAAA;IAAA;IAAA,KAGxCiB,MAHwC,gBAG/BnB,SAAS,EAHsB;;IAAA,KAOxCoB,UAPwC,GAO3B,MAAM;MACjB;MAEAC,OAAO,CAACC,GAAR,CAAY,KAAKnB,KAAL,CAAWgB,MAAX,CAAkBI,OAAlB,CAA0Bb,KAAtC;IAED,CAZuC;EAAA;;EAgBxCC,MAAM,GAAG;IACP,oBACE;MAAA,wBACE;QACE,IAAI,EAAC,MADP;QAEE,KAAK,EAAE;UAACC,KAAK,EAAE,SAAR;UAAkBC,QAAQ,EAAE,SAA5B;UAAsCC,OAAO,EAAE,MAA/C;UAAsDC,YAAY,EAAE,MAApE;UAA2EC,KAAK,EAAC,OAAjF;UAAyFC,MAAM,EAAE;QAAjG,CAFT,CAIE;QAJF;QAKE,GAAG,EAAE,KAAKE;MALZ;QAAA;QAAA;QAAA;MAAA,QADF,eAQE;QACI,OAAO,EAAE,KAAKC,UADlB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QARF;IAAA,gBADF;EAcD;;AA/BuC,C,CAqC1C;AAIA;;;AACA,SAASI,GAAT,GAAgB;EACd,oBACI;IAAK,KAAK,EAAE;MAACC,OAAO,EAAE,MAAV;MAAkBC,cAAc,EAAE;IAAlC,CAAZ;IAAA,wBACE,QAAC,UAAD;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,WAAD;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAMD,C,CAGD;;;KAVSF,G;AAWT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}