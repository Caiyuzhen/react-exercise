{"ast":null,"code":"var _jsxFileName = \"/Users/zen/Desktop/react-exercise/src/App.js\";\nimport \"./App.css\";\nimport React from 'react'; //引入 ReactDOM， 目的是为了使用 ReactDOM 的方法\n//🚀 组件的生命周期(🌟只有类组件才有生命周期,在实例化的时候才会出现生命周期)\n//🍎 WHAT?\n//【挂载阶段】\n//钩子函数顺序: \n//1.construction       （初始化数据,只执行一次，可以用来创建 Ref、使用 bind 结局 this 指向问题等） => \n//2.render             （渲染 UI, 每次组件执行都会触发, 注意不能在里边调用 setState() ！） => \n//3.componentDidMount   (组件挂载完毕后才会执行，可以用来发送网络请求，或者操作 DOM)\n//【更新阶段】\n//钩子函数顺序: \n//1.render              (渲染 UI,与挂载阶段是同一个 render)\n//2.componentDidUpdate （DOM 操作，可以获取到更新后的 DOM 内容，注意不能在里边调用 setState() ！）\n//【卸载(销毁)阶段】\n//钩子函数顺序: \n//1.componenWillUnmount （组件卸载前执行，可以用来取消网络请求，或者操作 DOM）\n//🍎 注意\n//construction、render 阶段不能发送 ajax 请求或者修改 DOM，否则会引发重复渲染；Commit 阶段才可以！\n//——————————————————————————————————————————————————————————————————\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Test extends React.Component {\n  componentWillUnmount() {\n    //5.【卸载(销毁)阶段】\n    console.log('销毁阶段-5:componentWillUnmount'); //卸载的时候才会执行\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u9700\\u8981\\u9500\\u6BC1\\u7684\\u51FD\\u6570\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n} //🍎 类组件生命周期\n\n\nclass App extends React.Component {\n  constructor() {\n    //1.【挂载阶段】先执行\n    super();\n    this.state = {\n      count: 0,\n      flag: true //true,显示 Test 组件， false 不显示 Test 组件\n\n    };\n\n    this.clickCountAdd = () => {\n      this.setState({\n        count: this.state.count + 1,\n        flag: this.state.flag = false\n      });\n    };\n\n    console.log('挂载阶段-1:constructor');\n  }\n\n  componentDidMount() {\n    //3.【挂载阶段】最后执行\n    console.log('挂载阶段-3:componentDidMount'); //在这个阶段发送 ajax 请求 ...\n  }\n\n  componentDidUpdate() {\n    //4.【更新阶段】\n    console.log('更新阶段-4:componentDidUpdate');\n    const div = document.querySelector('.div');\n    console.log(div);\n    div.innerHTML = '我是更新后的内容';\n  }\n\n  render() {\n    //2.【挂载阶段】再执行\n    console.log('更新/挂载阶段-2:render');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"div\",\n        children: \"\\u6211\\u662F\\u9ED8\\u8BA4\\u7684\\u5185\\u5BB9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), \"\\u589E\\u52A0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clickCountAdd,\n        children: this.state.count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), this.state.flag ? /*#__PURE__*/_jsxDEV(Test, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 30\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this);\n  }\n\n} // //最后需要 export 一下！\n\n\nexport default App;","map":{"version":3,"names":["React","Test","Component","componentWillUnmount","console","log","render","App","constructor","state","count","flag","clickCountAdd","setState","componentDidMount","componentDidUpdate","div","document","querySelector","innerHTML"],"sources":["/Users/zen/Desktop/react-exercise/src/App.js"],"sourcesContent":["import \"./App.css\"\nimport React from 'react' \n//引入 ReactDOM， 目的是为了使用 ReactDOM 的方法\n\n\n\n//🚀 组件的生命周期(🌟只有类组件才有生命周期,在实例化的时候才会出现生命周期)\n\n    //🍎 WHAT?\n      //【挂载阶段】\n          //钩子函数顺序: \n            //1.construction       （初始化数据,只执行一次，可以用来创建 Ref、使用 bind 结局 this 指向问题等） => \n            //2.render             （渲染 UI, 每次组件执行都会触发, 注意不能在里边调用 setState() ！） => \n            //3.componentDidMount   (组件挂载完毕后才会执行，可以用来发送网络请求，或者操作 DOM)\n\n      //【更新阶段】\n          //钩子函数顺序: \n            //1.render              (渲染 UI,与挂载阶段是同一个 render)\n            //2.componentDidUpdate （DOM 操作，可以获取到更新后的 DOM 内容，注意不能在里边调用 setState() ！）\n\n\n\n      //【卸载(销毁)阶段】\n          //钩子函数顺序: \n            //1.componenWillUnmount （组件卸载前执行，可以用来取消网络请求，或者操作 DOM）\n\n\n\n\n    //🍎 注意\n      //construction、render 阶段不能发送 ajax 请求或者修改 DOM，否则会引发重复渲染；Commit 阶段才可以！\n\n\n//——————————————————————————————————————————————————————————————————\n\n\n\nclass Test extends React.Component {\n\n  componentWillUnmount () {//5.【卸载(销毁)阶段】\n    console.log('销毁阶段-5:componentWillUnmount');//卸载的时候才会执行\n  }\n\n  render() {\n    return (\n      <div>需要销毁的函数</div>\n    );\n  }\n}\n\n\n//🍎 类组件生命周期\nclass App extends React.Component {\n\n    state = {\n      count: 0,\n      flag: true //true,显示 Test 组件， false 不显示 Test 组件\n    }\n\n\n    clickCountAdd = () =>{\n      this.setState({\n        count: this.state.count +1,\n        flag:this.state.flag = false\n      })\n    }\n\n\n    constructor() { //1.【挂载阶段】先执行\n      super();\n      console.log('挂载阶段-1:constructor');\n    }\n\n\n    componentDidMount() { //3.【挂载阶段】最后执行\n      console.log('挂载阶段-3:componentDidMount'); \n      //在这个阶段发送 ajax 请求 ...\n    }\n\n\n    componentDidUpdate () { //4.【更新阶段】\n      console.log('更新阶段-4:componentDidUpdate'); \n\n      const div = document.querySelector('.div');\n      console.log(div); \n      div.innerHTML = '我是更新后的内容';\n    }\n\n\n\n    render() { //2.【挂载阶段】再执行\n      console.log('更新/挂载阶段-2:render')\n      return (\n        <div>\n          <div className=\"div\">我是默认的内容</div>\n          增加\n          <button onClick={this.clickCountAdd}>\n            {this.state.count}\n          </button>\n\n          {/* //6.用一个动作来判断什么时候执行【卸载(销毁)阶段】 */}\n          {this.state.flag ? <Test /> : null} \n        </div>\n      )\n    }\n}\n\n\n\n\n\n\n// //最后需要 export 一下！\nexport default App\n\n\n"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AAIA;AAEI;AACE;AACI;AACE;AACA;AACA;AAEN;AACI;AACE;AACA;AAIN;AACI;AACE;AAKR;AACE;AAGN;;;;AAIA,MAAMC,IAAN,SAAmBD,KAAK,CAACE,SAAzB,CAAmC;EAEjCC,oBAAoB,GAAI;IAAC;IACvBC,OAAO,CAACC,GAAR,CAAY,6BAAZ,EADsB,CACqB;EAC5C;;EAEDC,MAAM,GAAG;IACP,oBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAGD;;AAVgC,C,CAcnC;;;AACA,MAAMC,GAAN,SAAkBP,KAAK,CAACE,SAAxB,CAAkC;EAgB9BM,WAAW,GAAG;IAAE;IACd;IADY,KAddC,KAcc,GAdN;MACNC,KAAK,EAAE,CADD;MAENC,IAAI,EAAE,IAFA,CAEK;;IAFL,CAcM;;IAAA,KARdC,aAQc,GARE,MAAK;MACnB,KAAKC,QAAL,CAAc;QACZH,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAkB,CADb;QAEZC,IAAI,EAAC,KAAKF,KAAL,CAAWE,IAAX,GAAkB;MAFX,CAAd;IAID,CAGa;;IAEZP,OAAO,CAACC,GAAR,CAAY,oBAAZ;EACD;;EAGDS,iBAAiB,GAAG;IAAE;IACpBV,OAAO,CAACC,GAAR,CAAY,0BAAZ,EADkB,CAElB;EACD;;EAGDU,kBAAkB,GAAI;IAAE;IACtBX,OAAO,CAACC,GAAR,CAAY,2BAAZ;IAEA,MAAMW,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAZ;IACAd,OAAO,CAACC,GAAR,CAAYW,GAAZ;IACAA,GAAG,CAACG,SAAJ,GAAgB,UAAhB;EACD;;EAIDb,MAAM,GAAG;IAAE;IACTF,OAAO,CAACC,GAAR,CAAY,kBAAZ;IACA,oBACE;MAAA,wBACE;QAAK,SAAS,EAAC,KAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,+BAGE;QAAQ,OAAO,EAAE,KAAKO,aAAtB;QAAA,UACG,KAAKH,KAAL,CAAWC;MADd;QAAA;QAAA;QAAA;MAAA,QAHF,EAQG,KAAKD,KAAL,CAAWE,IAAX,gBAAkB,QAAC,IAAD;QAAA;QAAA;QAAA;MAAA,QAAlB,GAA6B,IARhC;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAYD;;AApD6B,C,CA4DlC;;;AACA,eAAeJ,GAAf"},"metadata":{},"sourceType":"module"}